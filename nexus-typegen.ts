/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  LoginInput: { // input type
    email: string; // String!
    password: string; // String!
    rememberMe?: boolean | null; // Boolean
  }
  UserInput: { // input type
    birthDate: string; // String!
    email: string; // String!
    name: string; // String!
    password: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Address: { // root type
    address: Array<NexusGenRootTypes['AddressResponse'] | null>; // [AddressResponse]!
    birthDate: string; // String!
    email: string; // String!
    id: number; // Int!
    name: string; // String!
  }
  AddressResponse: { // root type
    city: string; // String!
    complement?: string | null; // String
    id: number; // Int!
    neighborHood: string; // String!
    postalCode: number; // Int!
    state: string; // String!
    street: string; // String!
    streetNumber: number; // Int!
  }
  Mutation: {};
  Pagination: { // root type
    currentPage: number; // Int!
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    totalPages: number; // Int!
    totalQuantity: number; // Int!
  }
  Query: {};
  UserListResponse: { // root type
    pagination: NexusGenRootTypes['Pagination']; // Pagination!
    users: Array<NexusGenRootTypes['Address'] | null>; // [Address]!
  }
  login: { // root type
    token?: string | null; // String
    user?: NexusGenRootTypes['Address'] | null; // Address
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Address: { // field return type
    address: Array<NexusGenRootTypes['AddressResponse'] | null>; // [AddressResponse]!
    birthDate: string; // String!
    email: string; // String!
    id: number; // Int!
    name: string; // String!
  }
  AddressResponse: { // field return type
    city: string; // String!
    complement: string | null; // String
    id: number; // Int!
    neighborHood: string; // String!
    postalCode: number; // Int!
    state: string; // String!
    street: string; // String!
    streetNumber: number; // Int!
  }
  Mutation: { // field return type
    createUser: NexusGenRootTypes['Address']; // Address!
    login: NexusGenRootTypes['login']; // login!
  }
  Pagination: { // field return type
    currentPage: number; // Int!
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    totalPages: number; // Int!
    totalQuantity: number; // Int!
  }
  Query: { // field return type
    data: NexusGenRootTypes['UserListResponse']; // UserListResponse!
    hello: string; // String!
    user: NexusGenRootTypes['Address']; // Address!
  }
  UserListResponse: { // field return type
    pagination: NexusGenRootTypes['Pagination']; // Pagination!
    users: Array<NexusGenRootTypes['Address'] | null>; // [Address]!
  }
  login: { // field return type
    token: string | null; // String
    user: NexusGenRootTypes['Address'] | null; // Address
  }
}

export interface NexusGenFieldTypeNames {
  Address: { // field return type name
    address: 'AddressResponse'
    birthDate: 'String'
    email: 'String'
    id: 'Int'
    name: 'String'
  }
  AddressResponse: { // field return type name
    city: 'String'
    complement: 'String'
    id: 'Int'
    neighborHood: 'String'
    postalCode: 'Int'
    state: 'String'
    street: 'String'
    streetNumber: 'Int'
  }
  Mutation: { // field return type name
    createUser: 'Address'
    login: 'login'
  }
  Pagination: { // field return type name
    currentPage: 'Int'
    hasNextPage: 'Boolean'
    hasPreviousPage: 'Boolean'
    totalPages: 'Int'
    totalQuantity: 'Int'
  }
  Query: { // field return type name
    data: 'UserListResponse'
    hello: 'String'
    user: 'Address'
  }
  UserListResponse: { // field return type name
    pagination: 'Pagination'
    users: 'Address'
  }
  login: { // field return type name
    token: 'String'
    user: 'Address'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createUser: { // args
      user: NexusGenInputs['UserInput']; // UserInput!
    }
    login: { // args
      data: NexusGenInputs['LoginInput']; // LoginInput!
    }
  }
  Query: {
    data: { // args
      offset?: number | null; // Int
      quantity?: number | null; // Int
    }
    user: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}